# ------------------------------------------------------------------------------------------------ #
#										   Star creation										  #
# ------------------------------------------------------------------------------------------------ #
# Phanon Pylon blasts system to bits
phanon_destroy_solar_system = {
	optimize_memory
	solar_system = {
		set_star_class = sc_phanon_pylon
	}
	every_system_planet = {
		limit = {
			is_star = yes
		}
		save_event_target_as = last_created_phanon_pylon
		create_ambient_object = {
			type = "star_explosion"
			play_animation_once = yes
			location = this
		}
		last_created_ambient_object = {
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
		change_pc = pc_phanon_pylon_star
		checked_modifier_remove = {
			MODIFIER = giga_o_star_modifier
		}
		clear_planet_modifiers = yes
	}
	every_system_planet = {
		limit = {
			is_star = no
		}
		remove_planet = yes
	}
	set_asteroid_belt = {
		radius = 0
	}
	every_system_planet = {
		clear_deposits = yes
		clear_planet_modifiers = yes
		prevent_anomaly = yes
	}
	every_system_planet = {
		limit = {
			is_asteroid = yes
		}
		clear_deposits = yes
	}
	every_system_planet = {
		limit = {
			exists = orbital_station
		}
		orbital_station = {
			dismantle = yes
		}
	}
	event_target:last_created_phanon_pylon = {
		create_ambient_object = {
			type = "phanon_dimensional_rift_portal"
			location = this
		}
		last_created_ambient_object = {
			set_ambient_object_flag = phanon_dimensional_rift_system_effect
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
	}
}

# Sigma Star blasts system to bits
sigma_destroy_solar_system = {
	optimize_memory
	solar_system = {
		set_star_class = sc_sigma_star
	}
	every_system_planet = {
		limit = {
			is_star = yes
		}
		save_event_target_as = last_created_sigma_star
		create_ambient_object = {
			type = "star_explosion"
			play_animation_once = yes
			location = this
		}
		last_created_ambient_object = {
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
		change_pc = pc_sigma_star
		remove_modifier = giga_o_star_modifier
		clear_planet_modifiers = yes
	}
	every_system_planet = {
		limit = {
			is_star = no
		}
		remove_planet = yes
	}
	set_asteroid_belt = {
		radius = 0
	}
	every_system_planet = {
		clear_deposits = yes
		clear_planet_modifiers = yes
		prevent_anomaly = yes
	}
	every_system_planet = {
		limit = {
			is_asteroid = yes
		}
		clear_deposits = yes
	}
	every_system_planet = {
		limit = {
			exists = orbital_station
		}
		orbital_station = {
			dismantle = yes
		}
	}
	event_target:last_created_sigma_star = {
		create_ambient_object = {
			type = "phanon_dimensional_rift_portal"
			location = this
		}
		last_created_ambient_object = {
			set_ambient_object_flag = phanon_dimensional_rift_system_effect
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
	}
}

# Upgrade phanon pylon to sigma star without beeg boom.
create_sigma_Star = {
	optimize_memory
	solar_system = {
		set_star_class = sc_sigma_star
	}
	every_system_planet = {
		limit = {
			is_star = yes
		}
		save_event_target_as = last_created_sigma_star
		change_pc = pc_sigma_star
	}
	set_asteroid_belt = {
		radius = 0
	}
}

# ------------------------------------------------------------------------------------------------ #
#									 Habitat creation effects									 #
# ------------------------------------------------------------------------------------------------ #
# --------------------------------- Save old amount of districts --------------------------------- #
save_aot_habitat_districts = {
	optimize_memory
	[[HOUSING]
		if = {
			limit = {
				has_district = $HOUSING$
			}
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = {
					type = $HOUSING$
				}
				variable = num_houses
			}
		}
	]
	[[ENERGY]
		if = {
			limit = {
				has_district = $ENERGY$
			}
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = {
					type = $ENERGY$
				}
				variable = num_energy
			}
		}
	]
	[[MINING]
		if = {
			limit = {
				has_district = $MINING$
			}
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = {
					type = $MINING$
				}
				variable = num_mines
			}
		}
	]
	[[INDUSTRY]
		if = {
			limit = {
				has_district = $INDUSTRY$
			}
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = {
					type = $INDUSTRY$
				}
				variable = num_industry
			}
		}
	]
	[[SCIENCE]
		if = {
			limit = {
				has_district = $SCIENCE$
			}
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = {
					type = $SCIENCE$
				}
				variable = num_research
			}
		}
	]
	[[SPECIAL]
		if = {
			limit = {
				has_district = $SPECIAL$
			}
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = {
					type = $SPECIAL$
				}
				variable = num_special
			}
		}
	]
}
create_new_aot_habitat_districts = {
	optimize_memory
	[[HOUSING]
		if = {
			limit = {
				is_variable_set = num_houses
			}
			while = {
				count = num_houses
				add_district = $HOUSING$
			}
			clear_variable = num_houses
		}
	]
	[[ENERGY]
		if = {
			limit = {
				is_variable_set = num_energy
			}
			while = {
				count = num_energy
				add_district = $ENERGY$
			}
			clear_variable = num_energy
		}
	]
	[[MINING]
		if = {
			limit = {
				is_variable_set = num_mines
			}
			while = {
				count = num_mines
				add_district = $MINING$
			}
			clear_variable = num_mines
		}
	]
	[[INDUSTRY]
		if = {
			limit = {
				is_variable_set = num_industry
			}
			while = {
				count = num_industry
				add_district = $INDUSTRY$
			}
			clear_variable = num_industry
		}
	]
	[[SCIENCE]
		if = {
			limit = {
				is_variable_set = num_research
			}
			while = {
				count = num_research
				add_district = $SCIENCE$
			}
			clear_variable = num_research
		}
	]
	[[SPECIAL]
		if = {
			limit = {
				is_variable_set = num_special
			}
			while = {
				count = num_special
				add_district = $SPECIAL$
			}
			clear_variable = num_special
		}
	]
}

# ---------------------------------- AoT habitat initialisation ---------------------------------- #
create_fe_dm_habitat = {
	optimize_memory
	clear_deposits = yes
	set_colony_type = col_habitat_dm
	change_pc = pc_dm_habitat
	set_planet_entity = {
		entity = "dm_habitat_phase_03_entity"
	}
	set_planet_size = @size_lvl1
	set_planet_flag = advanced_ascended_habitat_2
	add_modifier = {
		modifier = dm_habitat_mod
		days = -1
	}
}
spawn_aot_habitat_effect = {
	optimize_memory
	spawn_planet = {
		class = $PLANET_TYPE$
		location = event_target:target_planet
		orbit_location = yes
		orbit_angle_offset = 135
		orbit_distance_offset = $DISTANCE$
		size = @size_lvl1
		has_ring = no
		init_effect = {
			set_name = {
				key = HABITAT_PLANET_NAME
				variable_string = "\\[FROM.from.solar_system.GetName]"
			}
			set_planet_entity = {
				entity = $ENTITY$
			}
			set_surveyed = {
				surveyed = yes
				surveyor = FROM
			}
			set_all_comms_surveyed = yes
			set_colony_type = $COLONY_TYPE$
			clear_blockers = yes
			set_planet_flag = megastructure
			set_planet_flag = habitat
			set_planet_flag = habitat_level_1
			add_modifier = {
				modifier = $HAB_MODIFIER$
				days = -1
			}
			save_event_target_as = target_habitat
			event_target:target_planet = {
				set_planet_flag = habitat@PREV
			}
			add_deposit_if_missing = {
				DEPOSIT = aot_habitat_system_resources
			}
		}
	}
	spawn_support_pylons_in_system = yes
}
replace_habitat_capital_building = {
	optimize_memory
	if = {
		limit = {
			exists = owner
			has_enigmatic_capital = no
		}
		if = {
			limit = {
				has_building = building_colony_shelter
			}
			remove_building = building_colony_shelter
		}
		if = {
			limit = {
				has_building = building_capital
			}
			remove_building = building_capital
		}
		if = {
			limit = {
				has_building = building_major_capital
			}
			remove_building = building_major_capital
		}
		if = {
			limit = {
				has_building = building_system_capital
			}
			remove_building = building_system_capital
		}
		if = {
			limit = {
				has_building = building_hab_capital
			}
			remove_building = building_hab_capital
		}
		if = {
			limit = {
				has_building = building_hab_system_capital
			}
			remove_building = building_hab_system_capital
		}
		if = {
			limit = {
				has_building = building_resort_capital
			}
			remove_building = building_resort_capital
		}
		if = {
			limit = {
				has_building = building_resort_major_capital
			}
			remove_building = building_resort_major_capital
		}
		if = {
			limit = {
				has_building = building_slave_capital
			}
			remove_building = building_slave_capital
		}
		if = {
			limit = {
				has_building = building_slave_major_capital
			}
			remove_building = building_slave_major_capital
		}
		if = {
			limit = {
				has_building = building_ancient_palace
			}
			remove_building = building_ancient_palace
		}
		if = {
			limit = {
				has_building = building_ancient_control_center
			}
			remove_building = building_ancient_control_center
		}
		if = {
			limit = {
				has_building = building_hive_cluster
			}
			remove_building = building_hive_cluster
		}
		if = {
			limit = {
				has_building = building_imperial_capital
			}
			remove_building = building_imperial_capital
		}
		if = {
			limit = {
				has_building = building_imperial_machine_capital
			}
			remove_building = building_imperial_machine_capital
		}
		if = {
			limit = {
				has_building = building_imperial_hive_capital
			}
			remove_building = building_imperial_hive_capital
		}
		# Add the appropriate building now.
		if = {
			limit = {
				owner = {
					is_individualistic_empire = yes
				}
			}
			add_building = building_acot_dm_ancient_palace
		}
		if = {
			limit = {
				owner = {
					is_machine_empire = yes
				}
			}
			add_building = building_acot_dm_ancient_control_center
		}
		if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			add_building = building_acot_dm_ancient_hive_cluster
		}
	}
}

# -------- Temporary disabled mining and energy district code, as it doesn't work anyways. ------- #
create_dm_habitat = {
	optimize_memory
	save_aot_habitat_districts = {
		HOUSING = district_hab_housing
		ENERGY = district_hab_energy
		MINING = district_hab_mining
		INDUSTRY = district_hab_industrial
		# SCIENCE = district_hab_science
	}
	clear_deposits = yes
	set_colony_type = col_habitat_dm
	change_pc = pc_dm_habitat
	set_planet_entity = {
		entity = "dm_habitat_phase_03_entity"
	}
	set_planet_size = @size_lvl1
	set_planet_flag = advanced_ascended_habitat_2
	add_modifier = {
		modifier = dm_habitat_mod
		days = -1
	}
	add_deposit_if_missing = {
		DEPOSIT = aot_habitat_system_resources
	}
	# Add housing districts if there's been built any previously.
	create_new_aot_habitat_districts = {
		HOUSING = district_dm_hab_housing
		ENERGY = district_dm_hab_energy
		MINING = district_dm_hab_mining
		INDUSTRY = district_dm_hab_arms_industry
		# SCIENCE = district_dm_hab_research
	}
	replace_habitat_capital_building = yes
}
create_ae_habitat = {
	optimize_memory
	save_aot_habitat_districts = {
		HOUSING = district_dm_hab_housing
		ENERGY = district_dm_hab_energy
		MINING = district_dm_hab_mining
		# INDUSTRY = district_dm_hab_arms_industry
		# SCIENCE = district_dm_hab_research
		SPECIAL = district_dm_hab_dark_matter_energy
	}
	clear_deposits = yes
	set_colony_type = col_habitat_dm
	set_planet_flag = retrofitted_ae_habitat
	set_planet_flag = advanced_ascended_habitat_2
	remove_modifier = dm_habitat_mod
	change_pc = pc_ae_habitat
	add_modifier = {
		modifier = ae_habitat_mod
		days = -1
	}
	add_deposit_if_missing = {
		DEPOSIT = aot_habitat_system_resources
	}
	create_new_aot_habitat_districts = {
		HOUSING = district_ae_hab_housing
		ENERGY = district_ae_hab_energy
		MINING = district_ae_hab_mining
		# INDUSTRY = district_ae_hab_arms_industry
		# SCIENCE = district_ae_hab_research
		SPECIAL = district_ae_hab_dark_matter_energy
	}
	if = {
		limit = {
			has_planet_flag = is_base_dm_habitat
		}
		set_planet_entity = {
			entity = "alpha_habitat_phase_01_entity"
		}
		set_planet_size = @size_lvl1
	}
	if = {
		limit = {
			has_planet_flag = advanced_ascended_habitat
		}
		set_planet_entity = {
			entity = "alpha_habitat_phase_02_entity"
		}
		set_planet_size = @size_lvl2
	}
	if = {
		limit = {
			has_planet_flag = advanced_ascended_habitat_2
		}
		set_planet_entity = {
			entity = "alpha_habitat_phase_03_entity"
		}
		set_planet_size = @size_lvl3
	}
	replace_habitat_capital_building = yes
}
create_phanon_habitat = {
	optimize_memory
	save_aot_habitat_districts = {
		HOUSING = district_ae_hab_housing
		ENERGY = district_ae_hab_energy
		MINING = district_ae_hab_mining
		# INDUSTRY = district_ae_hab_arms_industry
		# SCIENCE = district_ae_hab_research
		SPECIAL = district_ae_hab_dark_matter_energy
	}
	clear_deposits = yes
	set_colony_type = col_habitat_phanon
	set_planet_flag = retrofitted_phanon_habitat
	set_planet_flag = advanced_ascended_habitat_2
	remove_modifier = dm_habitat_mod
	remove_modifier = ae_habitat_mod
	change_pc = pc_phanon_habitat
	add_modifier = {
		modifier = phanon_habitat_mod
		days = -1
	}
	add_deposit_if_missing = {
		DEPOSIT = aot_habitat_system_resources
	}
	create_new_aot_habitat_districts = {
		HOUSING = district_hab_phanon_housing
		ENERGY = district_hab_phanon_energy
		MINING = district_hab_phanon_mining
		# INDUSTRY = district_hab_phanon_arms_industry
		# SCIENCE = district_hab_phanon_research
		SPECIAL = district_hab_phanon_generator
	}
	if = {
		limit = {
			has_planet_flag = is_base_dm_habitat
		}
		set_planet_entity = {
			entity = "phanon_habitat_phase_01_entity"
		}
		set_planet_size = @size_lvl1
	}
	if = {
		limit = {
			has_planet_flag = advanced_ascended_habitat
		}
		set_planet_entity = {
			entity = "phanon_habitat_phase_02_entity"
		}
		set_planet_size = @size_lvl2
	}
	if = {
		limit = {
			has_planet_flag = advanced_ascended_habitat_2
		}
		set_planet_entity = {
			entity = "phanon_habitat_phase_03_entity"
		}
		set_planet_size = @size_lvl3
	}
	replace_habitat_capital_building = yes
}
create_sigma_habitat = {
	optimize_memory
	save_aot_habitat_districts = {
		HOUSING = district_hab_phanon_housing
		ENERGY = district_hab_phanon_energy
		MINING = district_hab_phanon_mining
		# INDUSTRY = district_hab_phanon_arms_industry
		# SCIENCE = district_hab_phanon_research
		SPECIAL = district_hab_phanon_generator
	}
	clear_deposits = yes
	set_colony_type = col_habitat_stellarite
	set_planet_flag = retrofitted_sigma_habitat
	set_planet_flag = advanced_ascended_habitat_2
	remove_modifier = dm_habitat_mod
	remove_modifier = ae_habitat_mod
	remove_modifier = phanon_habitat_mod
	change_pc = pc_sigma_habitat
	add_modifier = {
		modifier = stellarite_habitat_mod
		days = -1
	}
	add_deposit_if_missing = {
		DEPOSIT = aot_habitat_system_resources
	}
	create_new_aot_habitat_districts = {
		HOUSING = district_hab_stellarite_housing
		ENERGY = district_hab_stellarite_energy
		MINING = district_hab_stellarite_mining
		# INDUSTRY = district_hab_stellarite_arms_industry
		# SCIENCE = district_hab_stellarite_research
		SPECIAL = district_hab_stellarite_generator
	}
	if = {
		limit = {
			has_planet_flag = is_base_dm_habitat
		}
		set_planet_entity = {
			entity = "sigma_habitat_phase_01_entity"
		}
		set_planet_size = @size_lvl1
	}
	if = {
		limit = {
			has_planet_flag = advanced_ascended_habitat
		}
		set_planet_entity = {
			entity = "sigma_habitat_phase_02_entity"
		}
		set_planet_size = @size_lvl2
	}
	if = {
		limit = {
			has_planet_flag = advanced_ascended_habitat_2
		}
		set_planet_entity = {
			entity = "sigma_habitat_phase_03_entity"
		}
		set_planet_size = @size_lvl3
	}
	replace_habitat_capital_building = yes
}

#--------------------<  Initial spawn of support pylons when building a habitat  >------------------
spawn_support_pylons_in_system = {
	solar_system = {
		every_system_colony = {
			limit = {
				has_conduit_building = yes
				is_aot_habitat = no
			}
			spawn_support_pylons = yes
		}
	}
}

#-------------------------------<  Spawn support pylons around planet  >----------------------------
spawn_support_pylons = {
	if = {
		limit = {
			this = {
				is_aot_habitat = no
			}
			solar_system = {
				any_system_planet = {
					is_aot_habitat = yes
				}
			}
			not = {
				has_planet_flag = has_support_pylons
			}
		}
		set_planet_flag = has_support_pylons
		solar_system = {
			spawn_one_support_pylon = { ANGLE = 0 }
			spawn_one_support_pylon = { ANGLE = 90 }
			spawn_one_support_pylon = { ANGLE = 180 }
			spawn_one_support_pylon = { ANGLE = 270 }
		}
	}
}
spawn_one_support_pylon = {
	spawn_megastructure = {
		type = aot_delta_support_pylon
		planet = prev
		orbit_angle = $ANGLE$
		orbit_distance = $DISTANCE|20$
		owner = root
	}
}

# ------------------------------------------------------------------------------------------------ #
#										 Aot Orbitals Code										#
# ------------------------------------------------------------------------------------------------ #
# Updates the last build orbital to another tier visual.
update_last_built_orbital = {
	optimize_memory
	last_created_fleet = {
		save_event_target_as = old_orbital
		create_fleet = {
			effect = {
				set_owner = from
				create_ship = {
					random_existing_design = $TO_TIER$_$BODY$_orbital_$TYPE$
					effect = {
						set_disable_at_health = 0.05
						set_name = {
							key = TARGET_ORBITAL_NAME
							variable_string = "\\[FROM.from.planet.GetName]"
						}
					}
				}
				save_event_target_as = target_orbital
				fleet = {
					set_location = {
						target = event_target:target_planet
					}
				}
			}
		}
		event_target:target_orbital = {
			set_name = {
				key = TARGET_ORBITAL_NAME
				variable_string = "\\[FROM.from.planet.GetName]"
			}
		}
		event_target:old_orbital = {
			switch = {
				trigger = has_fleet_flag
				mining_orbital = {
					event_target:target_orbital = {
						set_fleet_flag = mining_orbital
					}
				}
				energy_orbital = {
					event_target:target_orbital = {
						set_fleet_flag = energy_orbital
					}
				}
			}
		}
		delete_fleet = event_target:old_orbital
	}
}

# Wraps all possible minor/major orbital upgrade paths in one command.
update_all_orbitals_wrapper = {
	optimize_memory
	update_minor_major_orbitals = {
		[[FROM_TIER] FROM_TIER = $FROM_TIER$ ]
		TO_TIER = $TO_TIER$
		BODY = major
		TYPE = generic
	}
	update_minor_major_orbitals = {
		[[FROM_TIER] FROM_TIER = $FROM_TIER$ ]
		TO_TIER = $TO_TIER$
		BODY = major
		TYPE = resource
	}
	update_minor_major_orbitals = {
		[[FROM_TIER] FROM_TIER = $FROM_TIER$ ]
		TO_TIER = $TO_TIER$
		BODY = minor
		TYPE = generic
	}
	update_minor_major_orbitals = {
		[[FROM_TIER] FROM_TIER = $FROM_TIER$ ]
		TO_TIER = $TO_TIER$
		BODY = minor
		TYPE = resource
	}
}

# Upgrades all orbitals of the same kind on the system. PARAMETERS: FROM_TIER, TO_TIER, BODY, TYPE
update_minor_major_orbitals = {
	optimize_memory
	solar_system = {
		every_fleet_in_system = {
			limit = {
				OR = {
					[[!FROM_TIER] is_ship_size = $BODY$_orbital_$TYPE$ ]
					[[FROM_TIER] is_ship_size = $FROM_TIER$_$BODY$_orbital_$TYPE$ ]
				}
			}
			orbit = {
				save_event_target_as = target_planet
			}
			save_event_target_as = old_orbital
			create_fleet = {
				effect = {
					set_owner = from
					create_ship = {
						random_existing_design = $TO_TIER$_$BODY$_orbital_$TYPE$
						effect = {
							set_disable_at_health = 0.05
							set_name = {
								key = TARGET_ORBITAL_NAME
								variable_string = "\\[FROM.from.planet.GetName]"
							}
						}
					}
					save_event_target_as = target_orbital
					fleet = {
						set_location = {
							target = event_target:target_planet
						}
					}
				}
			}
			event_target:target_orbital = {
				set_name = {
					key = TARGET_ORBITAL_NAME
					variable_string = "\\[FROM.from.planet.GetName]"
				}
			}
			event_target:old_orbital = {
				switch = {
					trigger = has_fleet_flag
					mining_orbital = {
						event_target:target_orbital = {
							set_fleet_flag = mining_orbital
						}
					}
					energy_orbital = {
						event_target:target_orbital = {
							set_fleet_flag = energy_orbital
						}
					}
				}
			}
			delete_fleet = event_target:old_orbital
		}
	}
}

# Planet Cracker effect
spawn_aot_habitat_blast_effect = {
	optimize_memory
	create_ambient_object = {
		location = this
		type = habitat_cracker_object
		duration = 5
		use_3d_location = yes
		base_angle_towards = star
		entity_face_object = star
		entity_offset = {
			min = 0
			max = 0
		}
		entity_scale_to_size = yes
		scale = 0.1
	}
}

# ------------------------------------------------------------------------------------------------ #
#							   Select Leader for Alpha Project Code							   #
# ------------------------------------------------------------------------------------------------ #
get_eligible_alpha_research_leader = {
	optimize_memory
	random_owned_leader = {
		limit = {
			leader_class = scientist
			NOT = {
				has_leader_flag = leader_death_events_blocked
			}
		}
		save_event_target_as = $TARGET_NAME$
	}
}
assign_alpha_researcher = {
	$TARGET$ = {
		set_leader_flag = alpha_research_leader
	}
	capital_scope = {
		enable_special_project = {
			name = "RESEARCH_ALPHA_POWER"
			location = this
			owner = root
		}
	}
}
